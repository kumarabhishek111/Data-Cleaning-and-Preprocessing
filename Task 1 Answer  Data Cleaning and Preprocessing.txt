Step 1: Import Libraries and Load Data
python
import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_csv('KaggleV2-May-2016.csv')
Step 2: Initial Data Exploration
python
# Check first few rows
print(df.head())

# Check data types and non-null counts
print(df.info())

# Check for missing values
print(df.isnull().sum())

# Check for duplicates
print(f"Number of duplicates: {df.duplicated().sum()}")
Step 3: Data Cleaning
Handle Missing Values
python
# In this dataset, there are no nulls, but if there were:
# For numerical columns, we might fill with median/mean
# df['Age'].fillna(df['Age'].median(), inplace=True)

# For categorical columns, we might fill with mode or 'Unknown'
# df['Gender'].fillna('Unknown', inplace=True)
Remove Duplicates
python
df.drop_duplicates(inplace=True)
Standardize Text Values
python
# Standardize gender values
df['Gender'] = df['Gender'].str.upper()

# Standardize no-show column
df['No-show'] = df['No-show'].map({'Yes': True, 'No': False})

# Standardize neighborhood names (remove extra spaces, capitalize consistently)
df['Neighbourhood'] = df['Neighbourhood'].str.strip().str.title()
Convert Date Formats
python
# Convert scheduled and appointment days to datetime
df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay']).dt.tz_localize(None)
df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay']).dt.tz_localize(None)

# Create new feature: days between scheduling and appointment
df['DaysWaiting'] = (df['AppointmentDay'] - df['ScheduledDay']).dt.days

# Ensure days waiting isn't negative (data error)
df = df[df['DaysWaiting'] >= 0]
Clean Column Headers
python
# Make all column names lowercase and replace hyphens with underscores
df.columns = df.columns.str.lower().str.replace('-', '_')
Fix Data Types
python
# Age should be integer (and positive)
df = df[df['age'] >= 0]
df['age'] = df['age'].astype(int)

# Convert scholarship, hipertension, diabetes, alcoholism, sms_received to boolean
bool_cols = ['scholarship', 'hipertension', 'diabetes', 'alcoholism', 'sms_received']
for col in bool_cols:
    df[col] = df[col].astype(bool)
Step 4: Validate Changes
python
print(df.info())
print(df.head())
Deliverables
1. Cleaned Dataset
The cleaned dataset is now saved as a new CSV file:

python
df.to_csv('cleaned_medical_appointments.csv', index=False)
2. Summary of Changes
Here's a summary of the data cleaning and preprocessing steps performed:

Duplicate Removal: Removed any duplicate rows from the dataset.

Text Standardization:

Converted gender values to uppercase ('F', 'M')

Standardized neighborhood names (title case, trimmed whitespace)

Converted no-show column to boolean (True/False)

Date Handling:

Converted ScheduledDay and AppointmentDay to datetime objects

Created new 'DaysWaiting' feature (days between scheduling and appointment)

Removed records with negative waiting days (invalid data)

Column Header Cleaning:

Made all column names lowercase

Replaced hyphens with underscores for Python compatibility

Data Type Corrections:

Ensured age is positive integer

Converted binary columns (scholarship, medical conditions) to boolean

Properly typed datetime columns

New Features:

Added 'days_waiting' to analyze how wait time affects no-shows

The cleaned dataset is now ready for analysis, with consistent formatting, proper data types, and no missing values or duplicates. The data quality has been significantly improved for reliable analysis.